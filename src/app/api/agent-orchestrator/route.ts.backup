import { NextRequest, NextResponse } from 'next/server';
import { callOpenAI } from '@/lib/openai';
import { AutomationData } from '@/app/types/automation';
import { handleError, handleApiError } from '@/lib/error-handler';
import { selectOptimalTool, WowTool } from '@/lib/wow-tool-registry';
import OpenAI from 'openai';
import { z } from 'zod';

// 🎯 로그 폭주 방지 (개발환경에서만 출력)
const originalLog = console.log;
console.log = (...args) => process.env.NODE_ENV === 'development' && originalLog(...args);

// 🔧 Zod 스키마 정의 - Function Calling용
const DetailedStepSchema = z.object({
  number: z.number(),
  title: z.string(),
  description: z.string(),
  expectedScreen: z.string(),
  checkpoint: z.string()
});

const ImportBlockSchema = z.object({
  make_import_json: z.string().optional(),
  sheet_header_csv: z.string().optional(),
  zapier_template: z.string().optional()
});

const CommonErrorSchema = z.object({
  code: z.string(),
  cause: z.string(),
  fix: z.string()
});

const GuideContentSchema = z.object({
  fromPreviousStep: z.string(),
  toolChoice: z.object({
    recommended: z.string(),
    reason: z.string(),
    alternatives: z.array(z.string()).optional()
  }),
  detailedSteps: z.array(DetailedStepSchema),
  importBlocks: ImportBlockSchema.default({}),
  commonErrors: z.array(CommonErrorSchema).default([
    {code: 'UNKNOWN', cause: '-', fix: '-'}, 
    {code: '-', cause: '-', fix: '-'}
  ]), // 기본값 추가 - Stage-2 Skip 경로에서 자동 주입
  successCheck: z.string(),
  practicalTips: z.array(z.string()).optional()
});

const GuideCardSchema = z.object({
  type: z.literal('guide'),
  stepId: z.string(),
  title: z.string(),
  subtitle: z.string(),
  basicConcept: z.string(),
  automationLevel: z.enum(['수동', '반자동', '완전자동']),
  content: GuideContentSchema,
  ecosystem: z.enum(['make', 'zapier', 'google', 'notion', 'manual']).optional()
});

// 🎯 새로운 WOW 카드 타입 스키마들
const WowGuideCardSchema = z.object({
  type: z.enum(['slide_guide', 'video_guide', 'landing_guide', 'dashboard_guide', 'creative_guide', 'audio_guide', 'chatbot_guide']),
  title: z.string(),
  subtitle: z.string(),
  detailedSteps: z.array(DetailedStepSchema), // min(1) 제거 - 0-step도 가능
  importBlocks: ImportBlockSchema.default({}),
  outputFormat: z.string(),
  pricing: z.string(),
  commonErrors: z.array(CommonErrorSchema).default([
    {code: 'UNKNOWN', cause: '-', fix: '-'}, 
    {code: '-', cause: '-', fix: '-'}
  ]), // 기본값 추가
  setupTime: z.string()
});

const ToolRecommendationCardSchema = z.object({
  type: z.literal('tool_recommendation'),
  recommendedTool: z.string(),
  wowScore: z.number(),
  reason: z.string(),
  alternatives: z.array(z.string()),
  pricing: z.string()
});

const WowPreviewCardSchema = z.object({
  type: z.literal('wow_preview'),
  beforeState: z.string(),
  afterState: z.string(),
  timeToValue: z.string(),
  keyBenefits: z.array(z.string())
});

const GuideResponseSchema = z.object({
  cards: z.array(GuideCardSchema)
});

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// 🎯 Stage-1 Function Calling 스키마
const Stage1ResponseSchema = z.object({
  cards: z.array(z.any()) // Stage-1에서는 다양한 카드 타입이 나올 수 있어서 any 사용
});

// 🔍 Tavily 검색으로 API 존재 여부 확인
async function checkApiStatusWithTavily(targetPlatform: string): Promise<{platform: string, hasApi: boolean, reason: string}> {
  try {
    const searchQuery = `${targetPlatform} official API documentation 2024`;
    
    const response = await fetch('/api/search-latest', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: searchQuery,
        maxResults: 3
      })
    });
    
    if (!response.ok) {
      console.warn(`[Tavily] 검색 실패: ${response.status}`);
      return {platform: targetPlatform, hasApi: false, reason: "검색 불가능"};
    }
    
    const searchResults = await response.json();
    
    // 🎯 빈 검색결과 graceful fallback
    if (!searchResults.results?.length) {
      return {platform: targetPlatform, hasApi: false, reason: "검색 결과 없음"};
    }
    
    const hasApiKeywords = ['api', 'developer', 'documentation', 'endpoint', 'rest'];
    const noApiKeywords = ['unofficial', 'scraping', 'no api', '비공식'];
    
    const allText = searchResults.results?.map((r: any) => r.content || '').join(' ').toLowerCase() || '';
    
    const hasApiScore = hasApiKeywords.filter(keyword => allText.includes(keyword)).length;
    const noApiScore = noApiKeywords.filter(keyword => allText.includes(keyword)).length;
    
    const hasApi = hasApiScore > noApiScore;
    const reason = hasApi ? `공식 API 문서 발견 (신뢰도: ${hasApiScore})` : `공식 API 없음 (대안 필요: ${noApiScore})`;
    
    console.log(`[Tavily] ${targetPlatform} API 상태: ${hasApi ? '있음' : '없음'} - ${reason}`);
    return {platform: targetPlatform, hasApi, reason};
    
  } catch (error) {
    console.error(`[Tavily] ${targetPlatform} 검색 오류:`, error);
    return {platform: targetPlatform, hasApi: false, reason: "검색 오류"};
  }
}

// 🎯 현실적 절충안: 3단계 하이브리드 방식 (기존 방식 유지 + 부분 최적화)
export async function POST(req: Request) {
  try {
    const { userInput, followupAnswers } = await req.json();
    
    console.log('🚀 [하이브리드] 3단계 자동화 생성 시작');
    console.log('📝 사용자 입력:', userInput);
    console.log('📋 후속 답변:', followupAnswers);

    const startTime = Date.now();
    let allCards = [];

    // 🎯 WOW 툴 선택 (키워드 기반 자동 매칭)
    const selectedWowTool = selectOptimalTool(userInput, followupAnswers);
    console.log(`🚀 [WOW 툴 선택] ${selectedWowTool.name} (${selectedWowTool.type}) - 스코어: ${selectedWowTool.wowScore}`);
    
    // 🔍 Tavily로 API 상태 실시간 확인 (워크플로우 타입만)
    let apiStatus = null;
    if (selectedWowTool.type === 'workflow') {
      // 사용자 입력에서 타겟 플랫폼 추출 (쿠팡, 잡코리아 등)
      const platformKeywords = ['쿠팡', '잡코리아', '당근마켓', '배민', '요기요', '카카오톡', '인스타그램'];
      const targetPlatform = platformKeywords.find(platform => userInput.includes(platform));
      
      if (targetPlatform) {
        console.log(`[Tavily] ${targetPlatform} API 상태 확인 중...`);
        apiStatus = await checkApiStatusWithTavily(targetPlatform);
      }
    }

    // 🔄 1단계: 니즈 분석 + 플로우 생성 (gpt-4o-2024-11-20 - 품질 우선)
    console.log('[1단계] 니즈 분석 + 플로우 생성 (gpt-4o-2024-11-20 - 품질 우선)');
    const stage1Response = await openai.chat.completions.create({
      model: 'gpt-4o-2024-11-20',
      tools: [{
        type: 'function',
        function: {
          name: 'return_cards',
          description: '생성된 카드들을 반환합니다',
          parameters: {
            type: 'object',
            properties: {
              cards: {
                type: 'array',
                items: {
                  type: 'object'
                }
              }
            },
            required: ['cards']
          }
        }
      }],
      tool_choice: 'required',
      messages: [
        {
          role: 'system',
          content: `당신은 2025년 WOW 자동화 전문가입니다. 사용자 요청을 분석하여 진짜 WOW한 경험을 제공하는 맞춤형 솔루션을 추천하세요.

CRITICAL FUNCTION CALLING RULE: 반드시 return_cards 함수를 호출하여 카드 배열을 반환해야 합니다. 빈 객체나 일반 텍스트 응답은 절대 금지입니다.

## 추천된 WOW 툴 정보
- **선택된 툴**: ${selectedWowTool.name}
- **툴 타입**: ${selectedWowTool.type}  
- **WOW 점수**: ${selectedWowTool.wowScore}/10
- **사용법**: ${selectedWowTool.how}
- **URL**: ${selectedWowTool.url}
- **가격**: ${selectedWowTool.pricing}
- **한국어 지원**: ${selectedWowTool.koreanSupport ? '지원' : '미지원'}
- **난이도**: ${selectedWowTool.difficulty}
- **설정 시간**: ${selectedWowTool.setupTime}

${apiStatus ? `
## 🔍 실시간 API 상태 (Tavily 검색 결과)
- **플랫폼**: ${apiStatus.platform}
- **API 상태**: ${apiStatus.hasApi ? '✅ 공식 API 사용 가능' : '❌ 공식 API 없음'}
- **상세**: ${apiStatus.reason}
- **권장 방법**: ${apiStatus.hasApi ? 'API 직접 연동' : 'CSV/데이터 다운로드 방식'}
` : ''}

## 🎯 WOW 툴 타입별 접근법
${selectedWowTool.type === 'video_gen' ? `
### 🎬 영상 생성 모드 (Runway/HeyGen)
- **출력 카드**: "video_guide" 타입으로 생성
- **핵심**: 스크립트 최적화 + AI 영상 + 실시간 렌더링
- **결과**: MP4 파일 + 편집 가능한 프로젝트
` : selectedWowTool.type === 'slide_gen' ? `
### 📊 슬라이드 생성 모드 (Zenspark/Beautiful.AI)
- **출력 카드**: "slide_guide" 타입으로 생성
- **핵심**: 내용 자동 구성 + 디자인 최적화 + 즉시 다운로드
- **결과**: PPT/PDF 파일 + 발표 준비 완료
` : selectedWowTool.type === 'landing_gen' ? `
### 🌐 랜딩페이지 생성 모드 (Durable/Typedream)
- **출력 카드**: "landing_guide" 타입으로 생성  
- **핵심**: 컨텐츠 자동화 + 디자인 최적화 + 즉시 퍼블리시
- **결과**: 라이브 웹사이트 URL + SEO 최적화
` : selectedWowTool.type === 'dashboard' ? `
### 📊 대시보드 생성 모드 (Hex/Metabase)
- **출력 카드**: "dashboard_guide" 타입으로 생성
- **핵심**: 데이터 연결 + 시각화 자동화 + 실시간 공유  
- **결과**: 인터랙티브 대시보드 URL + 실시간 업데이트
` : selectedWowTool.type === 'creative_gen' ? `
### 🎨 크리에이티브 생성 모드 (Bannerbear/Canva)
- **출력 카드**: "creative_guide" 타입으로 생성
- **핵심**: 템플릿 자동화 + 일괄 생성 + 브랜딩 일관성
- **결과**: 다수의 디자인 파일 + 자동 배포
` : selectedWowTool.type === 'audio_gen' ? `
### 🎵 오디오 생성 모드 (ElevenLabs/Murf)
- **출력 카드**: "audio_guide" 타입으로 생성
- **핵심**: 스크립트 최적화 + AI 음성 + 자연스러운 한국어
- **결과**: MP3/WAV 파일 + 팟캐스트/광고 활용
` : selectedWowTool.type === 'chatbot_gen' ? `
### 💬 챗봇 생성 모드 (Landbot/Chatbase)
- **출력 카드**: "chatbot_guide" 타입으로 생성  
- **핵심**: 대화 플로우 + 지식베이스 + 웹사이트 임베드
- **결과**: 라이브 챗봇 URL + 고객 응대 자동화
` : `
### 🔄 워크플로우 모드 (Make/Zapier/Apps Script)
- **출력 카드**: "flow" + "guide" 타입으로 생성
- **핵심**: API 연동 + 자동화 워크플로우 + 스케줄링
- **결과**: 자동화 시나리오 + 모니터링 대시보드

## ⛑️ Universal Workflow Rules (워크플로우 타입용)
1. 첫 단계에서 **engine** 값을 반드시 결정한다  
   - 가능 값: "make" | "zapier" | "apps_script" | "power_automate".
   - 모든 step 은 동일 engine 안에서 동작한다.
2. engine 별 '하나의 워크플로' 명칭  
   - make      → Scenario
   - zapier    → Zap
   - apps_script → Script 프로젝트
   - power_automate → Flow
3. **Step 1: 항상 새 워크플로(Scenario/Zap/Flow) 생성**부터 시작하고 이름을 지시한다.
4. 출력에 **flowMap** 배열을 포함해 모듈 연결 순서를 명시한다.  
   예) "flowMap":["Trigger:Scheduler","CSV-Download","Google Sheets-AddRow","Gmail-Send"]
5. **공식 API 상태에 따른 fallback 처리**:  
   ${apiStatus && !apiStatus.hasApi && selectedWowTool.type === 'workflow' ? 
     `"fallback": { "method": "csv_download", "reason": "${apiStatus.reason}" } 포함` : 
     'API 연동 방식 우선 추천'}
6. UI 라벨은 **굵게** (예: **+ Add another module**) 로 표기해 실제 버튼을 찾게 한다.

# 핵심 원칙: 사용자가 원하는 것이 아닌, 투입대비 산출 기준으로 AI가 추천

## 자동화 수준 분석 기준:
1. **빈도 분석**: 일회성 vs 주기적 vs 실시간
2. **데이터량**: 소량 vs 중간 vs 대량
3. **복잡도**: 단순 vs 중간 vs 복잡
4. **팀 규모**: 개인 vs 팀 vs 조직
5. **기술 수준**: 초보 vs 중급 vs 고급

## 자동화 수준별 투입대비 산출:

### 🟢 수동 처리 (ROI 측정 단계)
- **투입**: 30분-1시간/회
- **적용**: 월 1-2회 or 일회성 or 데이터 소량
- **장점**: 즉시 시작, 학습 비용 없음
- **단점**: 반복 시 비효율

### 🟡 반자동화 (효율성 증대)
- **투입**: 설정 1-2시간 + 주 5-10분 관리
- **적용**: 주 1회 이상 or 패턴 반복 or 중간 데이터량
- **장점**: 80% 시간 절약, 안정성
- **단점**: 초기 설정 필요

### 🔴 완전자동화 (스케일링)
- **투입**: 설정 3-5시간 + 월 10-20분 관리
- **적용**: 일일 반복 or 대량 데이터 or 팀 공유
- **장점**: 95% 시간 절약, 확장성
- **단점**: 높은 초기 투자

# 반드시 JSON 형태로 응답 (추천된 WOW 툴에 맞는 카드 생성):

${selectedWowTool.type !== 'workflow' ? `
## 🚀 WOW 전용 카드 형식 (${selectedWowTool.type})
{
  "cards": [
    {
      "type": "tool_recommendation",
      "title": "🏆 맞춤형 WOW 솔루션",
      "subtitle": "${selectedWowTool.name}로 ${selectedWowTool.setupTime}만에 완성",
      "selectedTool": {
        "name": "${selectedWowTool.name}",
        "type": "${selectedWowTool.type}",
        "url": "${selectedWowTool.url}",
        "wowScore": ${selectedWowTool.wowScore},
        "reasoning": "키워드 분석 결과 최적 매칭"
      },
      "alternatives": [],
      "selectionCriteria": {
        "userInput": "사용자 입력",
        "matchedKeywords": ["매칭된", "키워드들"],
        "difficultyPreference": "${selectedWowTool.difficulty}",
        "budgetRange": "${selectedWowTool.pricing}"
      }
    },
    {
      "type": "${selectedWowTool.type === 'slide_gen' ? 'slide_guide' : 
                selectedWowTool.type === 'video_gen' ? 'video_guide' : 
                selectedWowTool.type === 'avatar_video' ? 'video_guide' :
                selectedWowTool.type === 'landing_gen' ? 'landing_guide' :
                selectedWowTool.type === 'dashboard' ? 'dashboard_guide' :
                selectedWowTool.type === 'creative_gen' ? 'creative_guide' :
                selectedWowTool.type === 'audio_gen' ? 'audio_guide' :
                selectedWowTool.type === 'chatbot_gen' ? 'chatbot_guide' : 'guide'}",
      "tool": "${selectedWowTool.name}",
      "title": "🎯 ${selectedWowTool.name} 완전 가이드",
      "subtitle": "${selectedWowTool.setupTime}만에 WOW 결과 완성",
      "detailedSteps": [
        {
          "number": 1,
          "title": "${selectedWowTool.url} 접속하기",
          "description": "브라우저에서 ${selectedWowTool.name} 공식 사이트 접속",
          "expectedScreen": "${selectedWowTool.name} 메인 페이지",
          "checkpoint": "사이트가 정상 로딩되었는지 확인"
        }
      ],
      "estimatedTime": "${selectedWowTool.setupTime}",
      "pricing": "${selectedWowTool.pricing}",
      "commonErrors": []
    }
  ]
}
` : `
## 🔄 워크플로우 카드 형식 (기존 방식)
{
  "cards": [
    {
      "type": "needs_analysis",
      "title": "🎯 진짜 니즈 발견",
      "surfaceRequest": "사용자가 말한 것",
      "realNeed": "실제로 필요한 것",
      "recommendedLevel": "수동/반자동/완전자동",
      "expectedBenefit": "예상 효과",
      "investmentRequired": "필요한 투입",
      "whyThisLevel": "이 수준을 추천하는 이유"
    },
    {
      "type": "flow",
      "title": "🚀 ${selectedWowTool.name} 자동화 플로우",
      "subtitle": "투입대비 산출 최적화된 단계별 실행 계획",
      "engine": "${selectedWowTool.name === 'Make.com' ? 'make' : selectedWowTool.name === 'Zapier' ? 'zapier' : 'apps_script'}",
      "flowMap": ["Trigger:Event", "Process:Data", "Output:Result"],
      "fallback": { "method": "csv_download", "reason": "API 대안" },
      "steps": [
        {
          "id": "1",
          "icon": "🔧",
          "title": "구체적 결과 중심 단계명",
          "subtitle": "사용자가 느낄 편리함",
          "duration": "예상 시간"
        }
      ]
    }
  ]
}`
        },
        {
          role: 'user',
          content: `사용자 입력: "${userInput}"
후속 답변: ${JSON.stringify(followupAnswers)}

CRITICAL: 반드시 return_cards 함수를 호출하여 카드 배열을 반환해주세요. 빈 객체나 빈 배열은 절대 금지입니다.`
        }
      ],
      max_tokens: 2000,
      temperature: 0.7
    });

    // 1단계 결과 파싱 (Function Calling + Zod 검증)
    let stage1Cards: any[] = [];
    try {
      // 🔍 디버깅: 전체 응답 구조 확인
      const message = stage1Response.choices[0]?.message;
      console.log(`[DEBUG] 응답 메시지 타입:`, typeof message);
      console.log(`[DEBUG] tool_calls 존재:`, !!message?.tool_calls);
      console.log(`[DEBUG] tool_calls 길이:`, message?.tool_calls?.length || 0);
      console.log(`[DEBUG] content 존재:`, !!message?.content);
      
      const fc = message?.tool_calls?.[0];
      console.log(`[DEBUG] function call:`, fc ? 'YES' : 'NO');
      console.log(`[DEBUG] function name:`, fc?.function?.name);
      
      if (fc?.function?.name === 'return_cards') {
        console.log(`[DEBUG] function arguments:`, fc.function.arguments);
        const parsed = JSON.parse(fc.function.arguments);
        console.log(`[DEBUG] parsed object keys:`, Object.keys(parsed));
        console.log(`[DEBUG] has cards field:`, 'cards' in parsed);
        
        stage1Cards = Stage1ResponseSchema.parse(parsed).cards;
        console.log(`[1단계] Function Calling + Zod 검증 성공 - 생성된 카드 수: ${stage1Cards.length}`);
      } else {
        console.warn('[1단계] Function Calling 결과 없음');
        // 🔧 일반 content 응답 시 fallback 시도
        if (message?.content) {
          console.log(`[FALLBACK] content 응답 시도:`, message.content.substring(0, 200));
        }
      }
    } catch (error) {
      console.error('[1단계] Function Calling + Zod 파싱 오류:', error);
      stage1Cards = []; // 안전한 기본값
    }
    
    allCards.push(...stage1Cards);
    console.log(`[1단계] 완료 - 생성된 카드 수: ${stage1Cards.length}`);
    
    // engine 통일성 검증 및 flowMap 검증
    const initialFlowCard = stage1Cards.find(card => card.type === 'flow');
    if (initialFlowCard) {
      // engine 검증
      if (initialFlowCard.engine) {
        console.log(`[engine 통일] 선택된 엔진:`, initialFlowCard.engine);
      } else {
        console.warn(`[engine 경고] engine 값이 설정되지 않음`);
        // engine 값이 없으면 기본값 설정
        initialFlowCard.engine = 'make';
        console.log(`[engine 자동설정] 기본값 'make'로 설정됨`);
      }
      
      // flowMap 검증
      if (initialFlowCard.flowMap && Array.isArray(initialFlowCard.flowMap)) {
        console.log(`[flowMap 검증] 모듈 연결 순서:`, initialFlowCard.flowMap);
      } else {
        console.warn(`[flowMap 경고] flowMap이 설정되지 않음`);
        // flowMap이 없으면 단계에서 기본 생성
        initialFlowCard.flowMap = initialFlowCard.steps?.map((step: any, i: number) => 
          `Step${i+1}:${step.title.replace(/\s+/g, '-')}`
        ) || [];
        console.log(`[flowMap 자동생성] 기본 flowMap 생성:`, initialFlowCard.flowMap);
      }

      // fallback 검증
      if (initialFlowCard.fallback) {
        console.log(`[fallback 검증] API 대안 방법:`, initialFlowCard.fallback.method, '-', initialFlowCard.fallback.reason);
      }
    }

    // 플로우에서 단계 추출
    const flowCard = stage1Cards.find((card: any) => card.type === 'flow');
    const steps = flowCard?.steps || [];
    const selectedEngine = flowCard?.engine || 'make';
    
    // 🎯 엔진 통일성 체크 + mini 모델 1회 재호출 (비용 세이프가드)
    let retryFlag = false;
    const engineMismatch = (cards: any[], engine: string) => {
      return cards.some(c => c.engine && c.engine !== engine);
    };

    if (engineMismatch(stage1Cards, selectedEngine)) {
      if (!retryFlag) {
        retryFlag = true;
        console.log(`[엔진 통일] ${selectedEngine}으로 통일 필요 - mini 모델 1회 재호출`);
        
        try {
          const miniResponse = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            max_tokens: 300,
            messages: [
              {
                role: 'system',
                content: `아래 JSON에서 모든 "engine" 필드를 "${selectedEngine}"로 통일해주세요. 출력은 수정된 JSON 한 덩어리만, 다른 설명 금지.`
              },
              {
                role: 'user', 
                content: JSON.stringify(stage1Cards)
              }
            ]
          });
          
          stage1Cards = JSON.parse(miniResponse.choices[0].message.content || '[]');
          console.log(`[엔진 통일] 완료 - ${selectedEngine}으로 통일됨`);
        } catch (error) {
          console.warn('⚠️ 엔진 통일 실패 - 기존 카드 그대로 사용:', error);
        }
      } else {
        console.warn('⚠️ 엔진 불일치 - 재시도 불가, 수동 검토 필요');
      }
    }
    
    // 🎯 비-워크플로 타입일 때 Stage-2 즉시 return (토큰 50-80% 절약)
    const isWorkflow = selectedWowTool.type === 'workflow';
    if (!isWorkflow) {
      console.log(`🔕 Stage-2 skip (non-workflow) - ${selectedWowTool.type} 타입`);
      
      // 카드 그대로 종료
      allCards.push(...stage1Cards);
      
      const processingTime = Date.now() - startTime;
      const response_data = {
        cards: allCards,
        metadata: {
          generatedAt: new Date().toISOString(),
          processingTime: processingTime,
          approach: 'WOW_타입_1단계만',
          stages: {
            stage1: 'gpt-4o-2024-11-20 (WOW 가이드)',
            stage2: 'SKIPPED (non-workflow)',
            stage3: 'SKIPPED (non-workflow)'
          },
          costOptimization: '80%절약 (Stage-2,3 생략)',
          speedOptimization: '즉시 응답',
          toolType: selectedWowTool.type
        }
      };
      
      return NextResponse.json(response_data);
    }
    
    // ↓ 여기부터는 workflow 전용 루프
    console.log(`[2단계] 워크플로우 타입 - ${steps.length}개 단계에 대한 상세 가이드 생성`);
    console.log(`[2단계] 생성된 단계들:`, steps.map((s: any) => `${s.id}. ${s.title}`));

    // 🔄 2단계: 각 단계별 상세 가이드 생성 (gpt-4o-2024-11-20 - 최고 품질)
    const guideCards = [];
    
    // 1단계와 2단계 사이 RPM 한도 회피를 위한 딜레이
    console.log(`[2단계] 1단계 완료 후 RPM 한도 회피를 위해 1초 대기...`);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    for (let i = 0; i < steps.length; i++) {
      const step = steps[i];
      console.log(`[2단계] ${i + 1}번째 단계 가이드 생성: ${step.title} (stepId: ${step.id})`);
      
      // RPM 한도 회피를 위해 1초 대기 (기존 2초 → 1초 최적화)
      if (i > 0) {
        console.log(`[2단계] RPM 한도 회피를 위해 1초 대기...`);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // 이전 단계들의 결과물 수집
      const previousSteps = steps.slice(0, i);
      const previousGuides = guideCards.filter(card => 
        previousSteps.some((prevStep: any) => prevStep.id === card.stepId)
      );

      try {
        console.log(`[2단계] ${i + 1}번째 단계 가이드 생성: ${step.title} (stepId: ${step.id})`);
        
        const guideResponse = await openai.chat.completions.create({
          model: 'gpt-4o-2024-11-20',
          messages: [
            {
              role: 'system',
              content: `당신은 초보자도 100% 따라할 수 있는 자동화 가이드 전문가입니다.

# 반드시 정확한 JSON 형태로만 응답하세요:
{
  "cards": [
    {
      "type": "guide",
      "stepId": "${step.id}",
      "title": "${step.title}",
      "subtitle": "초보자도 따라할 수 있는 설명",
      "basicConcept": "이 단계의 목적과 필요성을 간단히 설명",
      "automationLevel": "수동",
      "ecosystem": "make",
      "content": {
        "fromPreviousStep": "이전 단계에서 만든 것을 활용합니다",
        "toolChoice": {
          "recommended": "Make.com",
          "reason": "초보자도 사용하기 쉽고 안정적입니다"
        },
        "detailedSteps": [
          {
            "number": 1,
            "title": "구체적인 첫 번째 작업",
            "description": "1. **브라우저**에서 Make.com 접속\\n2. **새 시나리오** 버튼 클릭\\n3. 설정을 진행합니다",
            "expectedScreen": "Make.com 대시보드가 표시됩니다",
            "checkpoint": "시나리오가 생성되었는지 확인"
          }
        ],
        "importBlocks": {
          "make_import_json": "{\\"scenario\\": \\"example\\"}",
          "sheet_header_csv": "이름,이메일,날짜"
        },
        "commonErrors": [
          {
            "code": "연결 오류",
            "cause": "API 키가 잘못됨",
            "fix": "API 키를 다시 확인하세요"
          }
        ],
        "successCheck": "설정이 완료되었는지 확인하세요"
      }
    }
  ]
}

⚠️ 중요: 반드시 위 형식의 완전한 JSON만 출력하세요. 설명이나 추가 텍스트는 절대 포함하지 마세요.`
            },
            {
              role: 'user',
              content: `
현재 단계: ${step.title} (${step.id}번째)
전체 목표: ${userInput}
사용자 정보: ${JSON.stringify(followupAnswers || {})}
선택된 엔진: ${selectedEngine}
전체 플로우맵: ${JSON.stringify(flowCard?.flowMap || [])}

이 단계는 "${selectedEngine}" 엔진의 기존 워크플로 내에서 "+모듈 추가" 방식으로 구현해야 합니다.
새로운 시나리오/Zap을 만들지 말고, 기존 워크플로에서 모듈만 추가하는 방식으로 안내하세요.
`
            }
          ],
        max_tokens: 2000,
          temperature: 0.3
        });

        const content = guideResponse.choices[0]?.message?.content?.trim();
        if (!content) {
          throw new Error('응답 내용이 없습니다');
        }

        // JSON 추출 및 정리
        let jsonContent = content;
        
        // 코드 블록 제거
        if (jsonContent.includes('```json')) {
          const match = jsonContent.match(/```json\s*([\s\S]*?)\s*```/);
          if (match) {
            jsonContent = match[1];
          }
        } else if (jsonContent.includes('```')) {
          const match = jsonContent.match(/```\s*([\s\S]*?)\s*```/);
          if (match) {
            jsonContent = match[1];
          }
        }
        
        // 문자열 정리
        jsonContent = jsonContent.trim();

        console.log(`[2단계] ${i + 1}번째 단계 응답 길이:`, content.length);

        try {
          const parsed = JSON.parse(jsonContent);
          
          if (parsed.cards && Array.isArray(parsed.cards) && parsed.cards.length > 0) {
            const stepGuides = parsed.cards.filter((card: any) => card.type === 'guide');
            
            // 필수 필드 보완 (engine 정보 전달)
            stepGuides.forEach((guide: any) => {
              if (!guide.engine) {
                guide.engine = selectedEngine;
              }
              
              if (!guide.content.importBlocks) {
                guide.content.importBlocks = {
                  make_import_json: `{"scenario": "${step.title}_automation"}`,
                  sheet_header_csv: "항목,값,날짜"
                };
              }
              
              if (!guide.content.commonErrors) {
                guide.content.commonErrors = [
                  {
                    code: "연결 실패",
                    cause: "인터넷 연결 또는 API 문제",
                    fix: "연결 상태를 확인하고 다시 시도하세요"
                  }
                ];
              }
            });
            
            guideCards.push(...stepGuides);
            console.log(`[2단계] ${i + 1}번째 단계 가이드 생성 완료 (${stepGuides.length}개 카드)`);
          } else {
            throw new Error('유효한 카드가 없습니다');
          }
        } catch (parseError) {
          console.error(`[2단계] ${i + 1}번째 단계 파싱 오류:`, parseError);
          
          // 기본 가이드 생성
          guideCards.push({
            type: 'guide',
            stepId: step.id.toString(),
            title: step.title,
            subtitle: '기본 가이드',
            basicConcept: '이 단계를 수행하기 위한 기본 가이드입니다.',
            automationLevel: '수동',
            ecosystem: 'manual',
            content: {
              fromPreviousStep: '이전 단계의 결과를 활용합니다',
              toolChoice: {
                recommended: '수동 작업',
                reason: '가장 확실한 방법입니다'
              },
              detailedSteps: [{
                number: 1,
                title: step.title,
                description: '단계별로 진행하세요',
                expectedScreen: '정상적인 화면',
                checkpoint: '설정이 완료되었는지 확인'
              }],
              importBlocks: {
                make_import_json: '{"scenario": "basic"}',
                sheet_header_csv: '항목,값'
              },
              commonErrors: [{
                code: '일반 오류',
                cause: '설정 문제',
                fix: '다시 시도해보세요'
              }],
              successCheck: '정상적으로 동작하는지 확인하세요'
            }
          });
        }
      } catch (error) {
        console.error(`[2단계] ${i + 1}번째 단계 생성 오류:`, error);
        
        // 오류 시 기본 가이드 생성
        guideCards.push({
          type: 'guide',
          stepId: step.id.toString(),
          title: step.title,
          subtitle: '오류 발생',
          basicConcept: '가이드 생성 중 오류가 발생했습니다.',
          automationLevel: '수동',
          ecosystem: 'manual',
          content: {
            fromPreviousStep: '이전 단계 연결',
            toolChoice: {
              recommended: '수동 작업',
              reason: '오류로 인한 기본값'
            },
            detailedSteps: [{
              number: 1,
              title: '재시도 필요',
              description: '페이지를 새로고침해주세요',
              expectedScreen: '정상 화면',
              checkpoint: '설정 확인'
            }],
            importBlocks: {
              make_import_json: '{"scenario": "basic"}',
              sheet_header_csv: '항목,값'
            },
            commonErrors: [{
              code: '생성 오류',
              cause: 'API 문제',
              fix: '다시 시도하세요'
            }],
            successCheck: '정상 동작 확인'
          }
        });
      }
    }

    allCards.push(...guideCards);
    console.log(`[2단계] 최종 생성된 가이드 카드 수: ${guideCards.length}/${steps.length}`);
        console.log(`[2단계] 생성된 가이드 카드들:`, guideCards.map((card: any) => ({
          stepId: card.stepId,
          title: card.title,
      hasDetailedSteps: !!(card.content?.detailedSteps?.length > 0)
        })));

    // 🔄 3단계: FAQ + 확장 아이디어 (gpt-4o-mini - 비용절약)
    console.log('[3단계] FAQ + 확장 아이디어 (gpt-4o-mini - 비용절약)');
    const stage3Response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `당신은 실전 자동화 전문가입니다. FAQ와 확장 아이디어를 생성하세요.

# 반드시 JSON 형태로 응답:
{
  "cards": [
    {
      "type": "faq",
      "title": "❓ 자주 묻는 질문",
      "items": [
        {
          "question": "실제 상황별 질문",
          "answer": "구체적이고 실용적인 답변"
        }
      ]
    },
    {
      "type": "expansion", 
      "title": "🚀 확장 아이디어",
      "subtitle": "더 큰 가치 창출",
      "possibilities": [
        "현재 자동화를 더 큰 시스템으로 확장하는 방법들 (AI 도구 활용 중심)"
      ],
      "futureVision": [
        "GPT-4o/Claude 3.5 Sonnet 등 최신 AI로 더 스마트하게 발전시키는 방향"
      ]
    },
    {
      "type": "method_recommendation",
      "title": "🛠️ 추천 방법",
      "subtitle": "상황별 최적 방법",
      "methods": [
        {
          "name": "방법명",
          "description": "설명",
          "pros": ["장점들"],
          "cons": ["단점들"],
          "difficulty": "쉬움/보통/어려움"
        }
      ]
    },
    {
      "type": "share",
      "title": "📤 공유하기",
      "subtitle": "결과 공유 및 협업",
      "shareOptions": [
        "공유 방법들"
      ]
    }
  ]
}`
        },
        {
          role: 'user',
          content: `
전체 목표: ${userInput}
생성된 플로우: ${JSON.stringify(flowCard?.steps || [])}
후속 답변: ${JSON.stringify(followupAnswers || {})}

# 🛠️ 다양한 솔루션 접근법 중심 지침:

## FAQ 작성 시:
- "기술적 지식이 없어도 할 수 있는 방법은?"
- "예산이 제한적일 때 무료로 구현하는 방법은?"
- "기존 도구(노션, 엑셀 등)를 최대한 활용하는 방법은?"
- "회사 보안 정책 때문에 외부 도구를 못 쓸 때는?"

## 확장 아이디어 작성 시:
- **현재 방법 → 더 스마트한 방법들**로 단계별 발전
- **개인 사용 → 팀 협업 → 조직 전체 시스템**
- **수동 처리 → 반자동 → 완전 자동**
- **일회성 → 지속적 모니터링 → 예측 기능**

## 추천 방법 작성 시 (최적 방법 1개 + 간단한 대안 1-2개):
- **🏆 최적 방법**: 후속답변 기반으로 이 사용자에게 가장 적합한 방법
- **🔄 간단한 대안**: 1-2개의 대안만 간략히 제시
- **❌ 안 추천하는 방법**: 왜 다른 방법들은 이 사용자에게 적합하지 않은지

실전 FAQ, 확장 아이디어, 추천 방법, 공유 옵션을 생성하세요.
`
        }
      ],
      max_tokens: 1500,
      temperature: 0.7
    });

    // 3단계 결과 파싱
    const stage3Content = stage3Response.choices[0]?.message?.content;
    try {
      if (stage3Content) {
        const jsonMatch = stage3Content.match(/```json\s*([\s\S]*?)\s*```/);
        const jsonContent = jsonMatch ? jsonMatch[1] : stage3Content;
        const parsed = JSON.parse(jsonContent);
        const stage3Cards = parsed.cards || [];
        allCards.push(...stage3Cards);
        console.log(`[3단계] 완료 - 생성된 카드 수: ${stage3Cards.length}`);
      }
    } catch (error) {
      console.error('[3단계] 파싱 오류:', error);
    }

    const processingTime = Date.now() - startTime;
    console.log(`[하이브리드] 완료 - 생성된 카드 수: ${allCards.length}`);
    console.log(`[💰 비용 최적화] 1단계: gpt-4o-2024-11-20 ($2.50/$10.00), 2단계: gpt-4o-2024-11-20 ($2.50/$10.00), 3단계: gpt-4o-mini ($0.15/$0.60)`);
    console.log(`[⚡ 속도 최적화] 1,2단계: 1초딜레이 (4o RPM한도 회피), 3단계: 빠른응답 (mini 높은RPM)`);
    console.log(`[🎨 품질 최적화] 플로우+가이드는 최고품질 모델, FAQ만 효율적 처리`);
    console.log(`[하이브리드] [최종 cards 수]: ${allCards.length}`);
    console.log(`[하이브리드] [카드 타입들]:`, allCards.map((card: any) => card.type));

    // 🎯 메타데이터 추가
    const response_data = {
      cards: allCards,
      metadata: {
        generatedAt: new Date().toISOString(),
        processingTime: processingTime,
        approach: '3단계_하이브리드_최적화',
        stages: {
          stage1: 'gpt-4o-2024-11-20 (니즈+플로우)',
          stage2: 'gpt-4o-2024-11-20 (상세가이드)',
          stage3: 'gpt-4o-mini (FAQ+확장)'
        },
        costOptimization: '33%절약 (FAQ만 mini 사용)',
        speedOptimization: '1초대기 (4o RPM한도 회피)',
        qualityMaintained: '플로우+가이드는 최고품질 유지'
      }
    };

    return NextResponse.json(response_data);

  } catch (error) {
    console.error('❌ 자동화 생성 실패:', error);
    return handleApiError(error);
  }
} 
